inner_sram_sip:
	FPGA: 
		helloworld: the FPGA running code to communicate using UART and control IP to test inner_sram
		sram_control_v1_0----------------
		sram_control_v1_0_S00_AXI--------   the AXI-IP using sram_ctrl_3 in vivado
		sram_ctrl------------------------                     
	PC :
		sram_sip:the python in the host PC to communicate with FPGA and send cmd to it


inner_sram_sip_2:
	FPGA: 
		helloworld: the FPGA running code to communicate using UART and control IP to test inner_sram
		sram_control_v1_0----------------
		sram_control_v1_0_S00_AXI--------   the AXI-IP using sram_ctrl_4 in vivado
		sram_ctrl------------------------                     
	PC :
		test_inp_outp:the python in the host PC to test communicate format like int/char 
		sram_sip_5_manual: the python in the host PC to communicate with FPGA and send cmd to it by the key and info
		sram_sip_5_auto: the python in the host PC to communicate with FPGA and send cmd to it by read the cmd-file
		cmd: the vector using in sram_sip_5_auto
		log: the log-file generated by sram_sip_5_auto


inner_sram_sip_3:
	FPGA: 
		helloworld: the FPGA running code to communicate using Ethernet and control IP to test inner_sram
		mac_driver: the driver of MAC-chip to control it
		sram_ctrl_driver: the IP-driver of sram_control 
		sram_control_v1_0----------------
		sram_control_v1_0_S00_AXI--------   the AXI-IP using sram_ctrl_4 in vivado
		sram_ctrl------------------------                     
	PC :
		version_1:
			error_check_eth: the error check script that read log and vector to analyse the error,note: the log format is different from UART
			raw_socket: the C source that run in Linux to communicate with FPGA
			run: the run script that send the parameter to raw_socket
			sram_test_algorithm: the algorithm that can gen the test vectors
			Makefile: the compile script 
			Note: the version_1: the python read the vector and send the parameter to the C-exe(has compiled),
                                              C write the log and python analyse it
		version_2:
			raw_socket_2: the C read the vector and do action and write log 
	vmware_config: the vmware_config for the Ethernet communicate


sram_ctrl:
	the verilog of IP sram_ctrl---different versions

sram_sip_1:

	FPGA:
		helloworld: the FPGA running code to communicate using UART and control IP to test SRAM
		pin: the constraint of the system
		pynq_revC: the script of config processing-system in PYNQ-Z1
		sram_control_v1_0----------------
		sram_control_v1_0_S00_AXI--------   the AXI-IP using sram_ctrl_4 in vivado
		sram_ctrl------------------------   NOTE: the ip is followed the real SRAM that enable is low	
	PC:
		communicate:
			test_inp_outp:the python in the host PC to test communicate format like int/char 
			sram_sip_6_manual: the python in the host PC to communicate with FPGA and send cmd to it by the key and info
			sram_sip_6_auto: the python in the host PC to communicate with FPGA and send cmd to it by read the cmd-file
			cmd: the vector using in sram_sip_5_auto
		error_check:
			the error check of sram test read the cmd of send to SRAM and the log that get from FPGA to analysis them and get a error log
		vector_gen:
			the sram test vector generator,generate the vector follow the txt cmd send format
sram_sip_2:
	
	FPGA£º
		helloworld: the FPGA running code to communicate using UART and control IP to test SRAM
		NOTE: the communication protocol is different from other UART communicate-sram_sip_1
		pin: the constraint of the system
		pynq_revC: the script of config processing-system in PYNQ-Z1
		sram_control_v1_0----------------
		sram_control_v1_0_S00_AXI--------   the AXI-IP using sram_ctrl_5 in vivado
		sram_ctrl------------------------   NOTE: the ip is followed the real SRAM that enable is low	
		NOTE: add the function of read directly from SRAM and can write jump some address
		      the condition compile need to be done before the syn each: simulation,inner_sram,external SRAM

	PC:
		sram_sip_manual: the python in the host PC to communicate with FPGA and send cmd to it by the key and info
		sram_sip_auto: the python in the host PC to communicate with FPGA and send cmd to it by read the cmd-file
		NOTE: the communication protocol is different from other UART communicate-sram_sip_1
		error_check: the error check of sram test read the cmd of send to SRAM and the log that get from FPGA to analysis them and get a error log
		sram_test_algorithm: the newest algorithm;the sram test vector generator
		Makefile

sram_sip_3:
NOTE:the version using the FPGA is different from that above using,the bus is avalon
	
	FPGA£º
		hardware:
			sram_control_IP: the sram_ctrl_5 and the avalon_wrapper
			de2_assign_pin.tcl: the constrains about the FPGA
			SRAM_SOC.v:the top level file
			others: the IP in the system
			

		software:
			communication: the communication protocol and the package send or receive format define
			dm9000a_driver: the Ethernet chip driver in the RTOS
			sram_control_ip_driver: the dirver of IP that in the avalon-bus
			other_file: the file that modify in the RTOS
		version_1: the first constrain of FPGA
		version_2: the second constrain of FPGA
	PC:
		demo: the once communication way
		sram_sip_manual: the python in the host PC to communicate with FPGA and send cmd to it by the key and info
		sram_sip_auto: the python in the host PC to communicate with FPGA and send cmd to it by read the cmd-file
		NOTE: the communication protocol is different from other UART communicate-sram_sip_1,and the communication way is using the Ethernet-package

		error_check: the error check of sram test read the cmd of send to SRAM and the log that get from FPGA to analysis them and get a error log
		sram_test_algorithm: the newest algorithm;the sram test vector generator
		Makefile

helloworld: the little demo about code
