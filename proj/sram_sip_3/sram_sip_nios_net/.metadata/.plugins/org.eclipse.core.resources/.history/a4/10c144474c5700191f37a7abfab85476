#include <stdio.h>
#include <string.h>
#include <ctype.h> 
#include "includes.h"

//-----------------cmd
#define WRITE_ONE 1
#define READ 2
#define WRITE_ALL 3
#define READ_D 4
#define WRITE_CFG 5
#define CUT_CNT 6
//-----------------cmd



typedef struct
{
    INT32U cmd;
    INT32U addr;
    INT32U data;
    INT32U area;
    INT32U inc_dec;
    INT32U cycle;
    INT32U jump;
} CMD_PACKAGE; 

INT32U buf_int (INT8U* buf)
{
    int i=0;
    INT32U number=0;
    for(i=0;i<sizeof(INT32U);i++)
    {       
        number |= ((INT32U)(*(buf+i))<<(i<<3));//little-endian   
    }
    return number;
}



int decoder_cmd (INT8U* buf,CMD_PACKAGE* cmd_package)
{
    cmd_package->cmd=buf_int(buf);
    switch(cmd_package->cmd)
    {
        case WRITE_ONE:
                cmd_package->addr=buf_int(buf+4)&0x3ff;
                cmd_package->data=buf_int(buf+8)&0xff;
                cmd_package->area=0;
                cmd_package->inc_dec=0;
                cmd_package->cycle=0;
                cmd_package->jump=0;
                break;
                
         case READ:
                cmd_package->addr=buf_int(buf+4)&0x3ff;
                cmd_package->data=0;
                cmd_package->area=0;
                cmd_package->inc_dec=0;
                cmd_package->cycle=0;
                cmd_package->jump=0;               
                break;
                  
         case WRITE_ALL:
                cmd_package->addr=0;
                cmd_package->data=buf_int(buf+8)&0xff;
                cmd_package->area=0;
                cmd_package->inc_dec=0;
                cmd_package->cycle=0;
                cmd_package->jump=0;                              
                break; 
                  
        case READ_D:
                cmd_package->addr=buf_int(buf+4)&0x3ff;
                cmd_package->data=0;
                cmd_package->area=0;
                cmd_package->inc_dec=0;
                cmd_package->cycle=0;
                cmd_package->jump=0;                
                break;    
                
        case WRITE_CFG:
                cmd_package->addr=buf_int(buf+4)&0x3ff;
                cmd_package->data=buf_int(buf+8)&0xff;
                cmd_package->area=0;
                cmd_package->inc_dec=0;
                cmd_package->cycle=0;
                cmd_package->jump=0;                   
                break;  
                
        case CUT_CNT:
                cmd_package->addr=buf_int(buf+4)&0x3ff;
                cmd_package->data=buf_int(buf+8)&0xff;
                cmd_package->area=0;
                cmd_package->inc_dec=0;
                cmd_package->cycle=0;
                cmd_package->jump=0;               
                break; 
        default:
                cmd_package->addr=buf_int(buf+4)&0x3ff;
                cmd_package->data=buf_int(buf+8)&0xff;
                cmd_package->area=0;
                cmd_package->inc_dec=0;
                cmd_package->cycle=0;
                cmd_package->jump=0;       
                break;
    }
    
    
    
    
    }




}