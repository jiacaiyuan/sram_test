/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "system.h"
#include "alt_types.h"
#include "io.h"

#define SRAM_CONTROL_mWriteReg(BASE_ADDR, OFFSET, DATA)   IOWR(BASE_ADDR, OFFSET, DATA)
#define SRAM_CONTROL_mReadReg(BASE_ADDR, OFFSET)   IORD(BASE_ADDR, OFFSET)
#define CTRL_ID XPAR_SRAM_CONTROL_0_DEVICE_ID
#define CTRL_BASE AVALON_WRAPPER_0_BASE
//for write
#define STA_ADDR_OFFSET  0x0
#define AREA_CFG_OFFSET  0x1
#define OP_CFG_OFFSET    0x2
#define SEND_OFFSET      0x3
#define ENABLE_OFFSET    0x4

//for read
#define OUTP_ADDR_OFFSET  0x5
#define OUTP_DATA_OFFSET  0x6
#define STATUS_OFFSET     0x7

#define DISENA 0x0
#define ENA 0x1
#define READ 0x1<<1
#define WRITE 0x0<<1

#define DELAY     1000000
#define ADDR_RANGE 0x3ff
#define DATA_RANGE 0xff
#define IDLE 0x2


void write_one(alt_u32* addr,alt_u32* data)
{
    int delay;
    volatile int status;
    for(delay=0;delay<DELAY;delay++);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,DISENA);//disable
    SRAM_CONTROL_mWriteReg(CTRL_BASE,AREA_CFG_OFFSET,0x0);//only write one
    SRAM_CONTROL_mWriteReg(CTRL_BASE,OP_CFG_OFFSET,0x0);//no-cycle & inc
    if(addr>ADDR_RANGE)
    {
        printf("ADDR OVER RANGE\n\r");
        addr=addr&0x3ff;
    }
    if(data>DATA_RANGE)
    {
        printf("DATA OVER RANGE\n\r");
        data=data&0xff;
    }
    SRAM_CONTROL_mWriteReg(CTRL_BASE,STA_ADDR_OFFSET,*addr);//write addr config
    SRAM_CONTROL_mWriteReg(CTRL_BASE,SEND_OFFSET,*data);//write data config
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,WRITE|ENA);//enable and write
    status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);//wait update ok return idle
    while(status!=IDLE)//finish write and update
    {
        status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
    }
    printf("WRITE_ONE %d %d\n\r",*addr,*data);
    return;
}


void write_all(alt_u32 *data)
{
    int delay;
    volatile int status;
    for(delay=0;delay<DELAY;delay++);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,DISENA);//disable
    SRAM_CONTROL_mWriteReg(CTRL_BASE,AREA_CFG_OFFSET,ADDR_RANGE);//write all
    SRAM_CONTROL_mWriteReg(CTRL_BASE,OP_CFG_OFFSET,0x0);//no-cycle & inc
    if(data>DATA_RANGE)
    {
        printf("DATA OVER RANGE\n\r");
        data=data&0xff;
    }
    SRAM_CONTROL_mWriteReg(CTRL_BASE,STA_ADDR_OFFSET,0x0);//write addr config
    SRAM_CONTROL_mWriteReg(CTRL_BASE,SEND_OFFSET,*data);//write data config
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,WRITE|ENA);//enable and write
    status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);//wait update ok return idle
    while(status!=IDLE)//finish write and update
    {
        status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
    }
    printf("WRITE_ALL %d\n\r",*data);
    return;
}


void write_cfg(alt_u32 addr,alt_u32 data,alt_u32 area,alt_u32 inc_dec,alt_u32 cycle,alt_u32 jump)//area min=0 ->one time
{
    int delay;
    alt_u32 op_cfg=0x0;
    volatile int status;
    if(inc_dec!=0) op_cfg=op_cfg|(0x1<<1);
    else           op_cfg=op_cfg|(0x0<<1);
    if(cycle!=0)   op_cfg=op_cfg|(0x1<<0);
    else           op_cfg=op_cfg|(0x0<<0);
    op_cfg=op_cfg|((jump&ADDR_RANGE)<<22);
    if(area>ADDR_RANGE) area=area&ADDR_RANGE;//avoid overflow but doesn't matter
    if(addr>ADDR_RANGE)
    {
        printf("ADDR OVER RANGE\n\r");
        addr=addr&0x3ff;
    }
    if(data>DATA_RANGE)
    {
        printf("DATA OVER RANGE\n\r");
        data=data&0xff;
    }
    for(delay=0;delay<DELAY;delay++);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,DISENA);//disable
    SRAM_CONTROL_mWriteReg(CTRL_BASE,OP_CFG_OFFSET,op_cfg);//write config
    SRAM_CONTROL_mWriteReg(CTRL_BASE,AREA_CFG_OFFSET,area);//write times
    SRAM_CONTROL_mWriteReg(CTRL_BASE,STA_ADDR_OFFSET,addr);//write addr config
    SRAM_CONTROL_mWriteReg(CTRL_BASE,SEND_OFFSET,data);//write data config
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,WRITE|ENA);//enable and write
    status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);//wait update ok return idle
    while(status!=IDLE)//finish write and update
    {
        status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
    }
    printf("WRITE_CFG %d %d %d %d %d\n\r",(op_cfg&0x3),jump,area,addr,data);
    return;
}

alt_u32 read(alt_u32 *addr)
{
    int delay;
    volatile int status;
    alt_u32 result_addr,result_data;
    for(delay=0;delay<DELAY;delay++);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,DISENA);//disable
    if(addr>ADDR_RANGE)
    {
        printf("ADDR OVER RANGE\n\r");
        addr=addr&0x3ff;
    }
    SRAM_CONTROL_mWriteReg(CTRL_BASE,SEND_OFFSET,*addr);//read addr config
    SRAM_CONTROL_mWriteReg(CTRL_BASE,OP_CFG_OFFSET,0x0);//no-cycle & inc
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,READ|ENA);//enable and read
    for(delay=0;delay<DELAY;delay++);//wait a moment
    result_addr=SRAM_CONTROL_mReadReg(CTRL_BASE,OUTP_ADDR_OFFSET);//read addr
    result_data=SRAM_CONTROL_mReadReg(CTRL_BASE,OUTP_DATA_OFFSET);//read data
    if(result_addr!=*addr)
    {
        printf("READ ERROR\n\r");
    }
    status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
    while(status!=IDLE)
    {
        status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
    }//ok and return idle
    printf("READ %d %d\n\r",result_addr,result_data);
    return result_data;
}

alt_u32 read_d(alt_u32 *addr)
{
    int delay;
    volatile int status;
    alt_u32 result_addr,result_data;
    for(delay=0;delay<DELAY;delay++);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,DISENA);//disable
    if(addr>ADDR_RANGE)
    {
        printf("ADDR OVER RANGE\n\r");
        addr=addr&0x3ff;
    }
    SRAM_CONTROL_mWriteReg(CTRL_BASE,SEND_OFFSET,*addr);//read addr config
    SRAM_CONTROL_mWriteReg(CTRL_BASE,OP_CFG_OFFSET,0x1<<2);//read direct
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,READ|ENA);//enable and read
    for(delay=0;delay<DELAY;delay++);//wait a moment
    result_addr=SRAM_CONTROL_mReadReg(CTRL_BASE,OUTP_ADDR_OFFSET);//read addr
    result_data=SRAM_CONTROL_mReadReg(CTRL_BASE,OUTP_DATA_OFFSET);//read data
    if(result_addr!=*addr)
    {
        printf("READ ERROR\n\r");
    }
    status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
    while(status!=IDLE)
    {
        status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
    }//ok and return idle
    printf("READ_D %d %d\n\r",result_addr,result_data);
    return result_data;
}


