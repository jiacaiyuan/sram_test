/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "xparameters.h"
#include "sram_control.h"

#define CTRL_ID XPAR_SRAM_CONTROL_0_DEVICE_ID
#define CTRL_BASE XPAR_SRAM_CONTROL_0_S00_AXI_BASEADDR
//for write
#define STA_ADDR_OFFSET SRAM_CONTROL_S00_AXI_SLV_REG0_OFFSET
#define TIM_CFG_OFFSET SRAM_CONTROL_S00_AXI_SLV_REG1_OFFSET
#define OP_CFG_OFFSET SRAM_CONTROL_S00_AXI_SLV_REG2_OFFSET
#define SEND_OFFSET SRAM_CONTROL_S00_AXI_SLV_REG3_OFFSET
#define ENABLE_OFFSET SRAM_CONTROL_S00_AXI_SLV_REG4_OFFSET

//for read
#define OUTP_ADDR_OFFSET SRAM_CONTROL_S00_AXI_SLV_REG5_OFFSET
#define OUTP_DATA_OFFSET SRAM_CONTROL_S00_AXI_SLV_REG6_OFFSET
#define STATUS_OFFSET SRAM_CONTROL_S00_AXI_SLV_REG7_OFFSET

#define DISENA 0x0
#define ENA 0x1
#define READ 0x1<<1
#define WRITE 0x0<<1

#define DELAY     1000000
#define ADDR_RANGE 0x3ff
#define DATA_RANGE 0xff
#define IDLE 0x2


void write_one(u32 addr,u32 data)
{
	int delay;
	volatile int status;
	for(delay=0;delay<DELAY;delay++);
	SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,DISENA);//disable
	SRAM_CONTROL_mWriteReg(CTRL_BASE,TIM_CFG_OFFSET,0x0);//only write one
	SRAM_CONTROL_mWriteReg(CTRL_BASE,OP_CFG_OFFSET,0x0);//no-cycle & inc
	if(addr>ADDR_RANGE)
	{
		print("ADDR OVER RANGE\n\r");
		addr=addr&0x3ff;
	}
	if(data>DATA_RANGE)
	{
		print("DATA OVER RANGE\n\r");
		data=data&0xff;
	}
	SRAM_CONTROL_mWriteReg(CTRL_BASE,STA_ADDR_OFFSET,addr);//write addr config
	SRAM_CONTROL_mWriteReg(CTRL_BASE,SEND_OFFSET,data);//write data config
	SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,WRITE|ENA);//enable and write
	status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);//wait update ok return idle
	while(status!=IDLE)//finish write and update
	{
		status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
	}
	printf("WRITE_ONE %x %x\n\r",addr,data);
	return;
}


void write_all(u32 data)
{
	int delay;
	volatile int status;
	for(delay=0;delay<DELAY;delay++);
	SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,DISENA);//disable
	SRAM_CONTROL_mWriteReg(CTRL_BASE,TIM_CFG_OFFSET,ADDR_RANGE);//write all
	SRAM_CONTROL_mWriteReg(CTRL_BASE,OP_CFG_OFFSET,0x0);//no-cycle & inc
	if(data>DATA_RANGE)
	{
		print("DATA OVER RANGE\n\r");
		data=data&0xff;
	}
	SRAM_CONTROL_mWriteReg(CTRL_BASE,STA_ADDR_OFFSET,0x0);//write addr config
	SRAM_CONTROL_mWriteReg(CTRL_BASE,SEND_OFFSET,data);//write data config
	SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,WRITE|ENA);//enable and write
	status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);//wait update ok return idle
	while(status!=IDLE)//finish write and update
	{
		status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
	}
	printf("WRITE_ALL %x\n\r",data);





	return;
}

















u32 read(u32 addr)
{
	int delay;
	volatile int status;
	u32 result_addr,result_data;
	for(delay=0;delay<DELAY;delay++);
	SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,DISENA);//disable
	if(addr>ADDR_RANGE)
	{
		print("ADDR OVER RANGE\n\r");
		addr=addr&0x3ff;
	}
	SRAM_CONTROL_mWriteReg(CTRL_BASE,SEND_OFFSET,addr);//read addr config
	SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,READ|ENA);//enable and read
	for(delay=0;delay<DELAY;delay++);//wait a moment
    result_addr=SRAM_CONTROL_mReadReg(CTRL_BASE,OUTP_ADDR_OFFSET);//read addr
    result_data=SRAM_CONTROL_mReadReg(CTRL_BASE,OUTP_DATA_OFFSET);//read data
    if(result_addr!=addr)
    {
    	print("READ ERROR\n\r");
    }
    status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
	while(status!=IDLE)
	{
		status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
	}//ok and return idle
	printf("READ %x %x\n\r",result_addr,result_data);
	return result_data;
}






int main()
{
    init_platform();
    u32 status,i,addr,data;
    print("Hello World\n\r");
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,0x0);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,STA_ADDR_OFFSET,0x1);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,TIM_CFG_OFFSET,0x1);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,OP_CFG_OFFSET,0x0);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,SEND_OFFSET,0xa5);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,0x1);
    //write

    for(i=0;i<1000000;i++);
    status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
    printf("status=%x\n\r",status);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,0x0);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,SEND_OFFSET,0x0);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,0x3);
    addr=SRAM_CONTROL_mReadReg(CTRL_BASE,OUTP_ADDR_OFFSET);
    data=SRAM_CONTROL_mReadReg(CTRL_BASE,OUTP_DATA_OFFSET);
    printf("data=%x,addr=%x\n\r",data,addr);

    for(i=0;i<1000000;i++);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,0x0);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,SEND_OFFSET,0x1);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,0x3);
    addr=SRAM_CONTROL_mReadReg(CTRL_BASE,OUTP_ADDR_OFFSET);
    data=SRAM_CONTROL_mReadReg(CTRL_BASE,OUTP_DATA_OFFSET);
    printf("data=%x,addr=%x\n\r",data,addr);

    for(i=0;i<1000000;i++);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,0x0);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,SEND_OFFSET,0x2);
    SRAM_CONTROL_mWriteReg(CTRL_BASE,ENABLE_OFFSET,0x3);
    addr=SRAM_CONTROL_mReadReg(CTRL_BASE,OUTP_ADDR_OFFSET);
    data=SRAM_CONTROL_mReadReg(CTRL_BASE,OUTP_DATA_OFFSET);
    printf("data=%x,addr=%x\n\r",data,addr);
    status=SRAM_CONTROL_mReadReg(CTRL_BASE,STATUS_OFFSET);
    printf("status=%x\n\r",status);
    cleanup_platform();
    return 0;
}
